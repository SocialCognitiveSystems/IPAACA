package ipaaca.protobuf;


message ProtocolInformation {
	// The IPAACA-protobuf protocol version
	optional string version = 1 [default = "3.0"];
	// Authentication token
	optional string auth_token = 2 [default = "no-auth"];
}


message IU {

	// Is this a persistent `IU` or an evanescent `Message`?
	enum IUMode {
		PERSISTENT = 0;
		EVANESCENT = 1;
	}

	optional ProtocolInformation protocol = 1;
	optional IUMode mode = 2 [default = PERSISTENT];

	// Immutable fields
	required string iu_id = 3;
	required string category = 4;
	required string owner = 5;

	// Mutable field with special treatment
	optional uint32 revision = 6 [default = 0];

	// Actual data in this IU.

	// A JSON string containing link information (by convention
	// the first level is a JSON object { ... } and all values are lists
	// of strings).
	optional string links = 7 [default = "{}"];
	// A JSON string containing metadata information (by convention
	// the first level is a JSON object { ... }).
	optional string metadata = 8 [default = "{}"];
	// A JSON string containting the payload data (by convention
	// the first level is a JSON object { ... }).
	optional string payload = 9 [default = "{}"];
}


// IURequests initiate re-sending of an persistent IU on a private
// scope between the requester and the creator of the IU.
message IURequest {

	optional ProtocolInformation protocol = 1;

	// IU id 
	required string iu_id = 2;
	required string hidden_scope_name = 3;
}


// IUUpdate messages are send by OutputBuffers to communicate changes
// to an IU. It may result from changes which the component holding
// the OutputBuffer made itself, or as a result of a successful
// IUUpdateRequest made via the InputBuffer of another component.
message IUUpdate {

	optional ProtocolInformation protocol = 1;

	required string category = 1.5;
	required string update_id = 2;
	required string iu_id = 3;

	// The revision number of the IU when the changes were performed
	required uint32 new_revision = 4;

	// The initiator of the updates
	required string initiator_id = 5;

	// The actual updates
	repeated JSONChange links = 6;
	repeated JSONChange metadata = 7;
	repeated JSONChange payload = 8;
}


// IUUpdateRequest messages are send by InputBuffers that want to make
// changes to IUs they hold. IUUpdateRequests may fail.
message IUUpdateRequest {

	optional ProtocolInformation protocol = 1;

	required string update_id = 2;
	required string iu_id = 3;

	// The revision number of the IU when the changes were performed
	required uint32 revision_to_be_updated = 4;

	// The initiator of the updates
	required string initiator_id = 5;

	// The actual updates
	repeated JSONChange payload = 8;
	repeated JSONChange links = 6;
	repeated JSONChange metadata = 7; // needs to be applied last, i.e., commit
}


// IURevisionUpdate confirm that an IUUpdateRequest was successful.
message IURevisionUpdate {

	optional ProtocolInformation protocol = 1;

	required string iu_id = 2;
	required string update_id = 3;
	required string new_revision = 4;
}

message TransactionMini {
	repeated string categories = 1;
}

// Transactions bundle a list of TransactionItems that should be
// performed as one atomic operation.
message Transaction {
	repeated string categories = 1;
	optional ProtocolInformation protocol = 2;
	required string transaction_id = 3;
	repeated TransactionItem items = 4;
}

// TransactionsItems are changes to the IU-network. It can comprise of
// (1) the publication of a new IU, or (2) an update of an existing IU.
// Due to restrictions of protobuf, both fields are set as "repeated",
// although each is rather considered "optional". A TransactionsItem is
// considered to be valid iff one of the two fields is an empty array
// and the other an array of length 1.
message TransactionItem {
	// Contains exactly one IU to be published.
	repeated IU added_iu = 1;
	// Contains exactly one IUUpdate to be performed.
	repeated IUUpdate update = 2;
}


message JSONChange {

	enum JSONChangeOperation {
		OVERWRITE = 0;
		INSERT = 1;
		DELETE = 2;
	}

	// Path to the object that is being added/changed. This string
	// contains a JSON array containing strings (for keys in objects)
	// and/or integers for indices into lists.
	// Examples: '["data", 41]'; '["user", "name"]'
	required string path = 1;
	// If is_deletion is true, the object at the specified path will
	// be deleted.
	// delete, overwrite
	optional JSONChangeOperation operation = 2 [default = OVERWRITE];
	 //? for indexing on lists when using the INSERT OPERATION, -1 -> EXTEND, [0-inf] INSERT, SLICING? do we need a second param.
	optional uint32 operation_index_argument = 3;
	// The value that will be set at the specified path (a JSON
	// string), this is ignored if is_deletion is true.
	optional string value = 4 [default = ""];
}
