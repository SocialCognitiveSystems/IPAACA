#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of IPAACA, the
#  "Incremental Processing Architecture
#   for Artificial Conversational Agents".
#
# Copyright (c) 2009-2015 Social Cognitive Systems Group
#                         CITEC, Bielefeld University
#
# http://opensource.cit-ec.de/projects/ipaaca/
# http://purl.org/net/ipaaca
#
# This file may be licensed under the terms of of the
# GNU Lesser General Public License Version 3 (the ``LGPL''),
# or (at your option) any later version.
#
# Software distributed under the License is distributed
# on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the LGPL for the specific language
# governing rights and limitations.
#
# You should have received a copy of the LGPL along with this
# program. If not, go to http://www.gnu.org/licenses/lgpl.html
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The development of this software was supported by the
# Excellence Cluster EXC 277 Cognitive Interaction Technology.
# The Excellence Cluster EXC 277 is a grant of the Deutsche
# Forschungsgemeinschaft (DFG) in the context of the German
# Excellence Initiative.

from __future__ import division, print_function

import itertools
import os
import platform
import sys
import time
import traceback

import ipaaca


def iu_update_handler(iu, event_type, local):
	try:
		print(event_type + ': ' + unicode(iu))
	except:
		print(u"An error occurred printing an IU for an event of type "+event_type)


parser = ipaaca.IpaacaArgumentParser(description='Ipaaca Session Replay -- Replay IU event logs from the command line')
parser.add_argument(
	'-i', '--input-file',
	default=['default.ipaacasession'],
	dest='input_file',
	metavar='INPUT-FILE',
	nargs=1,
	help='file from which to read IU data for replay')
parser.add_argument(
	'-k', '--keep-alive',
	default=1.0,
	dest='keep_alive',
	metavar='SECONDS',
	type=float,
	help='set time in seconds to wait for final remote IU updates (default: 1.0)')
parser.add_argument(
	'-c', '--categories',
	dest='categories',
	metavar='CATEGORIES',
	required=False,
	default=[],
	nargs='*',
	help='send events for these categories only')


if __name__ == '__main__':
	arguments = parser.parse_args()
	
	for_categories = list(arguments.categories)
	
	ob = ipaaca.OutputBuffer('IpaacaSessionReplay')
	# CAUTION: special semantics for replay script: do NOT auto-retract at shutdown
	#   (should only replicate observed retractions form the data file!)
	ob._teardown = lambda: True
	ob.register_handler(iu_update_handler)

	known_ius = {}
	
	log_file = sys.stdin if (arguments.input_file[0]=='-') else open(arguments.input_file[0], 'r')
	ref_time = None
	last_time = None
	for line in log_file:
		record = eval(line, {'__builtins__': None}, {})
		# event data
		uid = record['uid']
		category = record['category']
		typ = record['type']
		payload = record['payload']
		# consider only if category filter passes
		if len(for_categories)==0 or category in for_categories:
			# take ref time from first event
			if ref_time is None:
				ref_time = record['time']
				last_time = ref_time
			# recreate delay from previous event
			print('Sleep for '+str(record['time'] - last_time)+' s')
			time.sleep(record['time'] - last_time)
			last_time = record['time']
			# do it
			print('Synthesize event '+typ+' for IU UID '+uid+', category "'+category+'"')
			if typ=='MESSAGE':
				msg = ipaaca.Message(category)
				msg.payload = payload
				ob.add(msg)
			elif typ=='ADDED':
				if uid in known_ius:
					print('ERROR - already added UID '+uid+' before!')
				else:
					iu = ipaaca.IU(category)
					iu.payload = payload
					ob.add(iu)
					known_ius[uid] = iu
			elif typ=='UPDATED':
				if uid not in known_ius:
					print('ERROR - have not received IU with UID '+uid+' before!')
				else:
					iu = known_ius[uid]
					iu.payload = payload
			elif typ=='COMMITTED':
				if uid not in known_ius:
					print('ERROR - have not received IU with UID '+uid+' before!')
				else:
					iu = known_ius[uid]
					iu.commit()
			elif typ=='RETRACTED':
				if uid not in known_ius:
					print('ERROR - have not received IU with UID '+uid+' before!')
				else:
					iu = known_ius[uid]
					ob.remove(iu)
	
	try:
		print('Waiting; specified grace time '+str(arguments.keep_alive)+' s')
		time.sleep(arguments.keep_alive)
	except KeyboardInterrupt:
		pass
	except Exception, e:
		print(u'Exception: '+unicode(traceback.format_exc()))
		if log_file is not sys.stdin:
			log_file.close()
		ipaaca.exit(1)
	if log_file is not sys.stdin:
		log_file.close()
	ipaaca.exit(0)

