#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of IPAACA, the
#  "Incremental Processing Architecture
#   for Artificial Conversational Agents".
#
# Copyright (c) 2009-2015 Social Cognitive Systems Group
#                         CITEC, Bielefeld University
#
# http://opensource.cit-ec.de/projects/ipaaca/
# http://purl.org/net/ipaaca
#
# This file may be licensed under the terms of of the
# GNU Lesser General Public License Version 3 (the ``LGPL''),
# or (at your option) any later version.
#
# Software distributed under the License is distributed
# on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the LGPL for the specific language
# governing rights and limitations.
#
# You should have received a copy of the LGPL along with this
# program. If not, go to http://www.gnu.org/licenses/lgpl.html
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The development of this software was supported by the
# Excellence Cluster EXC 277 Cognitive Interaction Technology.
# The Excellence Cluster EXC 277 is a grant of the Deutsche
# Forschungsgemeinschaft (DFG) in the context of the German
# Excellence Initiative.

from __future__ import division, print_function

import logging
import os
import platform
import re
import sys
import time

import ipaaca


def event_type_color(typ):
	colors = {
		'ADDED': '32;1',
		'RETRACTED': '31;1',
		'UPDATED': '33;1',
		'MESSAGE': '34;1',
		'COMMITTED': '35;1',
		'LINKSUPDATED': '36;1',
		'RETRACTED': '37;1',
	}
	return colors.get(typ, '1')

def highlight_if_color(s, c='1'):
	return s if arguments.color else '[' + c + 'm' + s +'[m'

def pretty_printed_dict(d):
	s='{\n'
	for k, v in d.items():
		if isinstance(v, unicode) or isinstance(v, str):
			v = "'"+unicode(v)+"'"
		else:
			v = unicode(v)
		v2 = v if len(v) <= arguments.max_size else v[:arguments.max_size] + '<excess length omitted>'
		v2.replace('\\','\\\\').replace('\n', highlight_if_color('\\n'))
		s += "\t '%s': %s,\n" % (highlight_if_color(unicode(k),'1'), unicode(v2))
	s+='}'
	return s

def pretty_printed_iu_event(iu, event_type, local):
	s = ''
	t = time.time()
	lt = time.localtime(t)
	s += highlight_if_color('%.3f' % t, '1')
	s += ' %02d:%02d:%02d' % (lt.tm_hour, lt.tm_min, lt.tm_sec)
	s += ' ' + highlight_if_color('%-9s' % event_type, event_type_color(event_type))
	s += ' category=' + highlight_if_color(iu.category,event_type_color(event_type))
	s += ' channel=' + iu.buffer._channel
	s += ' uid=' + iu.uid
	s += ' owner=' + iu.owner_name
	if event_type is not 'MESSAGE':
		s += '\nlinks=' + pretty_printed_dict(iu.get_all_links())
	s += '\npayload=' + pretty_printed_dict(iu.payload)
	return s

def iu_event_handler(iu, event_type, local):
	if arguments.regex:
		for cat in arguments.categories: # actually now regexs, not categories
			if re.match(cat, iu.category):
				break
		else:
			return
	print(pretty_printed_iu_event(iu, event_type, local), end='\n\n')

def exit(code):
	ipaaca.exit(code)
	#if platform.system() == 'Windows':
	#	os._exit(code)
	#else:
	#	sys.exit(code)

parser = ipaaca.IpaacaArgumentParser(description='Ipaaca IU Sniffer -- Selectively listen to IPAACA traffic')
parser.add_argument(
	'--channels',
	dest='channels',
	default=['default'],
	metavar='CHANNEL',
	nargs='+',
	help="set the channels to listen on (otherwise 'default')")
parser.add_argument(
	'-c', '--categories',
	default=[''],
	dest='categories',
	metavar='CATEGORY',
	nargs='+',
	help='set categories (or regex patterns) to be matched')
parser.add_argument(
	'-e', '--event-types',
	default=None,
	dest='event_types',
	metavar='EVENT-TYPE',
	nargs='+',
	help='set event types ({})'.format(' '.join(ipaaca.iu.IUEventType._choices)))
parser.add_argument(
	'-r', '--regex',
	action='store_true',
	dest='regex',
	help='match categories by regular expressions')
parser.add_argument(
	'--no-color',
	action='store_true',
	dest='color',
	help='do not colorize output')
parser.add_argument(
	'--size-limit',
	default=2048,
	dest='max_size',
	metavar='LIMIT',
	type=int,
	help='limit payload display chars (default: 2048)')


if __name__ == '__main__':
	arguments = parser.parse_args()
	buffers = {}

	# Create one input buffer for each channel we are listening on
	for channel in arguments.channels:
		buffers[channel] = ipaaca.InputBuffer(
			'IpaacaIUSniffer',
			category_interests=arguments.categories if not arguments.regex else [''],
			channel=channel,
			resend_active=True)
		# Check whether the specified event_types are valid
		if arguments.event_types is not None:
			for et in arguments.event_types:
				if et.upper() not in ipaaca.iu.IUEventType._choices:
					print('ERROR: "{et}" is not a valid IPAACA event type.'.format(et=et.upper()))
					exit(code=1)
		buffers[channel].register_handler(
			iu_event_handler,
			for_event_types=[et.upper() for et in arguments.event_types] if arguments.event_types is not None else None)

	# Tell user what we are doing
	print('ipaaca-iu-sniffer listening')
	print('  * on channel(s): ' + ', '.join(arguments.channels))
	print('  * for event type(s): ', end='')
	if arguments.event_types is None:
		print('any')
	else:
		print(', '.join([highlight_if_color(et.upper(), event_type_color(et.upper())) for et in arguments.event_types]))
	print('  * for category/ies', end='')
	if arguments.categories == ['']:
		print(': any')
	else:
		if arguments.regex:
			print(' that match the regex', end='')
		print(': ' + ', '.join(arguments.categories))

	# Wait for the user to kill the sniffer
	try:
		while True:
			time.sleep(1)
	except KeyboardInterrupt:
		pass
	except Exception, e:
		print(u'Exception: '+unicode(traceback.format_exc()))
		ipaaca.exit(1)
	ipaaca.exit(0)
