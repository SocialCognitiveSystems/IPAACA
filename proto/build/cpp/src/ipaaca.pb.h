// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/ipaaca.proto

#ifndef PROTOBUF_src_2fipaaca_2eproto__INCLUDED
#define PROTOBUF_src_2fipaaca_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ipaaca {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_src_2fipaaca_2eproto();
void protobuf_AssignDesc_src_2fipaaca_2eproto();
void protobuf_ShutdownFile_src_2fipaaca_2eproto();

class IntMessage;
class LinkSet;
class PayloadItem;
class IU;
class IUPayloadUpdate;
class IURetraction;
class IUCommission;
class IULinkUpdate;

enum IU_AccessMode {
  IU_AccessMode_PUSH = 0,
  IU_AccessMode_REMOTE = 1,
  IU_AccessMode_MESSAGE = 2
};
bool IU_AccessMode_IsValid(int value);
const IU_AccessMode IU_AccessMode_AccessMode_MIN = IU_AccessMode_PUSH;
const IU_AccessMode IU_AccessMode_AccessMode_MAX = IU_AccessMode_MESSAGE;
const int IU_AccessMode_AccessMode_ARRAYSIZE = IU_AccessMode_AccessMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* IU_AccessMode_descriptor();
inline const ::std::string& IU_AccessMode_Name(IU_AccessMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    IU_AccessMode_descriptor(), value);
}
inline bool IU_AccessMode_Parse(
    const ::std::string& name, IU_AccessMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IU_AccessMode>(
    IU_AccessMode_descriptor(), name, value);
}
// ===================================================================

class IntMessage : public ::google::protobuf::Message {
 public:
  IntMessage();
  virtual ~IntMessage();
  
  IntMessage(const IntMessage& from);
  
  inline IntMessage& operator=(const IntMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IntMessage& default_instance();
  
  void Swap(IntMessage* other);
  
  // implements Message ----------------------------------------------
  
  IntMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntMessage& from);
  void MergeFrom(const IntMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ipaaca.protobuf.IntMessage)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_src_2fipaaca_2eproto();
  friend void protobuf_AssignDesc_src_2fipaaca_2eproto();
  friend void protobuf_ShutdownFile_src_2fipaaca_2eproto();
  
  void InitAsDefaultInstance();
  static IntMessage* default_instance_;
};
// -------------------------------------------------------------------

class LinkSet : public ::google::protobuf::Message {
 public:
  LinkSet();
  virtual ~LinkSet();
  
  LinkSet(const LinkSet& from);
  
  inline LinkSet& operator=(const LinkSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkSet& default_instance();
  
  void Swap(LinkSet* other);
  
  // implements Message ----------------------------------------------
  
  LinkSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinkSet& from);
  void MergeFrom(const LinkSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // repeated string targets = 2;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 2;
  inline const ::std::string& targets(int index) const;
  inline ::std::string* mutable_targets(int index);
  inline void set_targets(int index, const ::std::string& value);
  inline void set_targets(int index, const char* value);
  inline void set_targets(int index, const char* value, size_t size);
  inline ::std::string* add_targets();
  inline void add_targets(const ::std::string& value);
  inline void add_targets(const char* value);
  inline void add_targets(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& targets() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_targets();
  
  // @@protoc_insertion_point(class_scope:ipaaca.protobuf.LinkSet)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> targets_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_src_2fipaaca_2eproto();
  friend void protobuf_AssignDesc_src_2fipaaca_2eproto();
  friend void protobuf_ShutdownFile_src_2fipaaca_2eproto();
  
  void InitAsDefaultInstance();
  static LinkSet* default_instance_;
};
// -------------------------------------------------------------------

class PayloadItem : public ::google::protobuf::Message {
 public:
  PayloadItem();
  virtual ~PayloadItem();
  
  PayloadItem(const PayloadItem& from);
  
  inline PayloadItem& operator=(const PayloadItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadItem& default_instance();
  
  void Swap(PayloadItem* other);
  
  // implements Message ----------------------------------------------
  
  PayloadItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayloadItem& from);
  void MergeFrom(const PayloadItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // required string type = 3 [default = "str"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // @@protoc_insertion_point(class_scope:ipaaca.protobuf.PayloadItem)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  ::std::string* type_;
  static const ::std::string _default_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_src_2fipaaca_2eproto();
  friend void protobuf_AssignDesc_src_2fipaaca_2eproto();
  friend void protobuf_ShutdownFile_src_2fipaaca_2eproto();
  
  void InitAsDefaultInstance();
  static PayloadItem* default_instance_;
};
// -------------------------------------------------------------------

class IU : public ::google::protobuf::Message {
 public:
  IU();
  virtual ~IU();
  
  IU(const IU& from);
  
  inline IU& operator=(const IU& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IU& default_instance();
  
  void Swap(IU* other);
  
  // implements Message ----------------------------------------------
  
  IU* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IU& from);
  void MergeFrom(const IU& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef IU_AccessMode AccessMode;
  static const AccessMode PUSH = IU_AccessMode_PUSH;
  static const AccessMode REMOTE = IU_AccessMode_REMOTE;
  static const AccessMode MESSAGE = IU_AccessMode_MESSAGE;
  static inline bool AccessMode_IsValid(int value) {
    return IU_AccessMode_IsValid(value);
  }
  static const AccessMode AccessMode_MIN =
    IU_AccessMode_AccessMode_MIN;
  static const AccessMode AccessMode_MAX =
    IU_AccessMode_AccessMode_MAX;
  static const int AccessMode_ARRAYSIZE =
    IU_AccessMode_AccessMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AccessMode_descriptor() {
    return IU_AccessMode_descriptor();
  }
  static inline const ::std::string& AccessMode_Name(AccessMode value) {
    return IU_AccessMode_Name(value);
  }
  static inline bool AccessMode_Parse(const ::std::string& name,
      AccessMode* value) {
    return IU_AccessMode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // required uint32 revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);
  
  // required string category = 3 [default = "undef"];
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 3;
  inline const ::std::string& category() const;
  inline void set_category(const ::std::string& value);
  inline void set_category(const char* value);
  inline void set_category(const char* value, size_t size);
  inline ::std::string* mutable_category();
  inline ::std::string* release_category();
  
  // required string payload_type = 4 [default = "MAP"];
  inline bool has_payload_type() const;
  inline void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 4;
  inline const ::std::string& payload_type() const;
  inline void set_payload_type(const ::std::string& value);
  inline void set_payload_type(const char* value);
  inline void set_payload_type(const char* value, size_t size);
  inline ::std::string* mutable_payload_type();
  inline ::std::string* release_payload_type();
  
  // required string owner_name = 5;
  inline bool has_owner_name() const;
  inline void clear_owner_name();
  static const int kOwnerNameFieldNumber = 5;
  inline const ::std::string& owner_name() const;
  inline void set_owner_name(const ::std::string& value);
  inline void set_owner_name(const char* value);
  inline void set_owner_name(const char* value, size_t size);
  inline ::std::string* mutable_owner_name();
  inline ::std::string* release_owner_name();
  
  // required bool committed = 6 [default = false];
  inline bool has_committed() const;
  inline void clear_committed();
  static const int kCommittedFieldNumber = 6;
  inline bool committed() const;
  inline void set_committed(bool value);
  
  // required .ipaaca.protobuf.IU.AccessMode access_mode = 7 [default = PUSH];
  inline bool has_access_mode() const;
  inline void clear_access_mode();
  static const int kAccessModeFieldNumber = 7;
  inline ::ipaaca::protobuf::IU_AccessMode access_mode() const;
  inline void set_access_mode(::ipaaca::protobuf::IU_AccessMode value);
  
  // required bool read_only = 8 [default = false];
  inline bool has_read_only() const;
  inline void clear_read_only();
  static const int kReadOnlyFieldNumber = 8;
  inline bool read_only() const;
  inline void set_read_only(bool value);
  
  // repeated .ipaaca.protobuf.PayloadItem payload = 9;
  inline int payload_size() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 9;
  inline const ::ipaaca::protobuf::PayloadItem& payload(int index) const;
  inline ::ipaaca::protobuf::PayloadItem* mutable_payload(int index);
  inline ::ipaaca::protobuf::PayloadItem* add_payload();
  inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem >&
      payload() const;
  inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem >*
      mutable_payload();
  
  // repeated .ipaaca.protobuf.LinkSet links = 10;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 10;
  inline const ::ipaaca::protobuf::LinkSet& links(int index) const;
  inline ::ipaaca::protobuf::LinkSet* mutable_links(int index);
  inline ::ipaaca::protobuf::LinkSet* add_links();
  inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >&
      links() const;
  inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >*
      mutable_links();
  
  // @@protoc_insertion_point(class_scope:ipaaca.protobuf.IU)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_payload_type();
  inline void clear_has_payload_type();
  inline void set_has_owner_name();
  inline void clear_has_owner_name();
  inline void set_has_committed();
  inline void clear_has_committed();
  inline void set_has_access_mode();
  inline void clear_has_access_mode();
  inline void set_has_read_only();
  inline void clear_has_read_only();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::std::string* category_;
  static const ::std::string _default_category_;
  ::std::string* payload_type_;
  static const ::std::string _default_payload_type_;
  ::google::protobuf::uint32 revision_;
  int access_mode_;
  ::std::string* owner_name_;
  ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem > payload_;
  ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet > links_;
  bool committed_;
  bool read_only_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_src_2fipaaca_2eproto();
  friend void protobuf_AssignDesc_src_2fipaaca_2eproto();
  friend void protobuf_ShutdownFile_src_2fipaaca_2eproto();
  
  void InitAsDefaultInstance();
  static IU* default_instance_;
};
// -------------------------------------------------------------------

class IUPayloadUpdate : public ::google::protobuf::Message {
 public:
  IUPayloadUpdate();
  virtual ~IUPayloadUpdate();
  
  IUPayloadUpdate(const IUPayloadUpdate& from);
  
  inline IUPayloadUpdate& operator=(const IUPayloadUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IUPayloadUpdate& default_instance();
  
  void Swap(IUPayloadUpdate* other);
  
  // implements Message ----------------------------------------------
  
  IUPayloadUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IUPayloadUpdate& from);
  void MergeFrom(const IUPayloadUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // required uint32 revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);
  
  // repeated .ipaaca.protobuf.PayloadItem new_items = 3;
  inline int new_items_size() const;
  inline void clear_new_items();
  static const int kNewItemsFieldNumber = 3;
  inline const ::ipaaca::protobuf::PayloadItem& new_items(int index) const;
  inline ::ipaaca::protobuf::PayloadItem* mutable_new_items(int index);
  inline ::ipaaca::protobuf::PayloadItem* add_new_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem >&
      new_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem >*
      mutable_new_items();
  
  // repeated string keys_to_remove = 4;
  inline int keys_to_remove_size() const;
  inline void clear_keys_to_remove();
  static const int kKeysToRemoveFieldNumber = 4;
  inline const ::std::string& keys_to_remove(int index) const;
  inline ::std::string* mutable_keys_to_remove(int index);
  inline void set_keys_to_remove(int index, const ::std::string& value);
  inline void set_keys_to_remove(int index, const char* value);
  inline void set_keys_to_remove(int index, const char* value, size_t size);
  inline ::std::string* add_keys_to_remove();
  inline void add_keys_to_remove(const ::std::string& value);
  inline void add_keys_to_remove(const char* value);
  inline void add_keys_to_remove(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys_to_remove() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys_to_remove();
  
  // required bool is_delta = 5 [default = false];
  inline bool has_is_delta() const;
  inline void clear_is_delta();
  static const int kIsDeltaFieldNumber = 5;
  inline bool is_delta() const;
  inline void set_is_delta(bool value);
  
  // required string writer_name = 6;
  inline bool has_writer_name() const;
  inline void clear_writer_name();
  static const int kWriterNameFieldNumber = 6;
  inline const ::std::string& writer_name() const;
  inline void set_writer_name(const ::std::string& value);
  inline void set_writer_name(const char* value);
  inline void set_writer_name(const char* value, size_t size);
  inline ::std::string* mutable_writer_name();
  inline ::std::string* release_writer_name();
  
  // @@protoc_insertion_point(class_scope:ipaaca.protobuf.IUPayloadUpdate)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_is_delta();
  inline void clear_has_is_delta();
  inline void set_has_writer_name();
  inline void clear_has_writer_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem > new_items_;
  ::google::protobuf::uint32 revision_;
  bool is_delta_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_to_remove_;
  ::std::string* writer_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_src_2fipaaca_2eproto();
  friend void protobuf_AssignDesc_src_2fipaaca_2eproto();
  friend void protobuf_ShutdownFile_src_2fipaaca_2eproto();
  
  void InitAsDefaultInstance();
  static IUPayloadUpdate* default_instance_;
};
// -------------------------------------------------------------------

class IURetraction : public ::google::protobuf::Message {
 public:
  IURetraction();
  virtual ~IURetraction();
  
  IURetraction(const IURetraction& from);
  
  inline IURetraction& operator=(const IURetraction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IURetraction& default_instance();
  
  void Swap(IURetraction* other);
  
  // implements Message ----------------------------------------------
  
  IURetraction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IURetraction& from);
  void MergeFrom(const IURetraction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // required uint32 revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ipaaca.protobuf.IURetraction)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_revision();
  inline void clear_has_revision();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::google::protobuf::uint32 revision_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_src_2fipaaca_2eproto();
  friend void protobuf_AssignDesc_src_2fipaaca_2eproto();
  friend void protobuf_ShutdownFile_src_2fipaaca_2eproto();
  
  void InitAsDefaultInstance();
  static IURetraction* default_instance_;
};
// -------------------------------------------------------------------

class IUCommission : public ::google::protobuf::Message {
 public:
  IUCommission();
  virtual ~IUCommission();
  
  IUCommission(const IUCommission& from);
  
  inline IUCommission& operator=(const IUCommission& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IUCommission& default_instance();
  
  void Swap(IUCommission* other);
  
  // implements Message ----------------------------------------------
  
  IUCommission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IUCommission& from);
  void MergeFrom(const IUCommission& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // required uint32 revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);
  
  // required string writer_name = 3;
  inline bool has_writer_name() const;
  inline void clear_writer_name();
  static const int kWriterNameFieldNumber = 3;
  inline const ::std::string& writer_name() const;
  inline void set_writer_name(const ::std::string& value);
  inline void set_writer_name(const char* value);
  inline void set_writer_name(const char* value, size_t size);
  inline ::std::string* mutable_writer_name();
  inline ::std::string* release_writer_name();
  
  // @@protoc_insertion_point(class_scope:ipaaca.protobuf.IUCommission)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_writer_name();
  inline void clear_has_writer_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::std::string* writer_name_;
  ::google::protobuf::uint32 revision_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_src_2fipaaca_2eproto();
  friend void protobuf_AssignDesc_src_2fipaaca_2eproto();
  friend void protobuf_ShutdownFile_src_2fipaaca_2eproto();
  
  void InitAsDefaultInstance();
  static IUCommission* default_instance_;
};
// -------------------------------------------------------------------

class IULinkUpdate : public ::google::protobuf::Message {
 public:
  IULinkUpdate();
  virtual ~IULinkUpdate();
  
  IULinkUpdate(const IULinkUpdate& from);
  
  inline IULinkUpdate& operator=(const IULinkUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IULinkUpdate& default_instance();
  
  void Swap(IULinkUpdate* other);
  
  // implements Message ----------------------------------------------
  
  IULinkUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IULinkUpdate& from);
  void MergeFrom(const IULinkUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // required uint32 revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline ::google::protobuf::uint32 revision() const;
  inline void set_revision(::google::protobuf::uint32 value);
  
  // repeated .ipaaca.protobuf.LinkSet new_links = 3;
  inline int new_links_size() const;
  inline void clear_new_links();
  static const int kNewLinksFieldNumber = 3;
  inline const ::ipaaca::protobuf::LinkSet& new_links(int index) const;
  inline ::ipaaca::protobuf::LinkSet* mutable_new_links(int index);
  inline ::ipaaca::protobuf::LinkSet* add_new_links();
  inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >&
      new_links() const;
  inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >*
      mutable_new_links();
  
  // repeated .ipaaca.protobuf.LinkSet links_to_remove = 4;
  inline int links_to_remove_size() const;
  inline void clear_links_to_remove();
  static const int kLinksToRemoveFieldNumber = 4;
  inline const ::ipaaca::protobuf::LinkSet& links_to_remove(int index) const;
  inline ::ipaaca::protobuf::LinkSet* mutable_links_to_remove(int index);
  inline ::ipaaca::protobuf::LinkSet* add_links_to_remove();
  inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >&
      links_to_remove() const;
  inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >*
      mutable_links_to_remove();
  
  // required bool is_delta = 5 [default = false];
  inline bool has_is_delta() const;
  inline void clear_is_delta();
  static const int kIsDeltaFieldNumber = 5;
  inline bool is_delta() const;
  inline void set_is_delta(bool value);
  
  // required string writer_name = 6;
  inline bool has_writer_name() const;
  inline void clear_writer_name();
  static const int kWriterNameFieldNumber = 6;
  inline const ::std::string& writer_name() const;
  inline void set_writer_name(const ::std::string& value);
  inline void set_writer_name(const char* value);
  inline void set_writer_name(const char* value, size_t size);
  inline ::std::string* mutable_writer_name();
  inline ::std::string* release_writer_name();
  
  // @@protoc_insertion_point(class_scope:ipaaca.protobuf.IULinkUpdate)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_is_delta();
  inline void clear_has_is_delta();
  inline void set_has_writer_name();
  inline void clear_has_writer_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet > new_links_;
  ::google::protobuf::uint32 revision_;
  bool is_delta_;
  ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet > links_to_remove_;
  ::std::string* writer_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_src_2fipaaca_2eproto();
  friend void protobuf_AssignDesc_src_2fipaaca_2eproto();
  friend void protobuf_ShutdownFile_src_2fipaaca_2eproto();
  
  void InitAsDefaultInstance();
  static IULinkUpdate* default_instance_;
};
// ===================================================================


// ===================================================================

// IntMessage

// required sint32 value = 1;
inline bool IntMessage::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntMessage::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntMessage::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntMessage::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 IntMessage::value() const {
  return value_;
}
inline void IntMessage::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// LinkSet

// required string type = 1;
inline bool LinkSet::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkSet::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkSet::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkSet::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LinkSet::type() const {
  return *type_;
}
inline void LinkSet::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LinkSet::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LinkSet::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkSet::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* LinkSet::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string targets = 2;
inline int LinkSet::targets_size() const {
  return targets_.size();
}
inline void LinkSet::clear_targets() {
  targets_.Clear();
}
inline const ::std::string& LinkSet::targets(int index) const {
  return targets_.Get(index);
}
inline ::std::string* LinkSet::mutable_targets(int index) {
  return targets_.Mutable(index);
}
inline void LinkSet::set_targets(int index, const ::std::string& value) {
  targets_.Mutable(index)->assign(value);
}
inline void LinkSet::set_targets(int index, const char* value) {
  targets_.Mutable(index)->assign(value);
}
inline void LinkSet::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkSet::add_targets() {
  return targets_.Add();
}
inline void LinkSet::add_targets(const ::std::string& value) {
  targets_.Add()->assign(value);
}
inline void LinkSet::add_targets(const char* value) {
  targets_.Add()->assign(value);
}
inline void LinkSet::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LinkSet::targets() const {
  return targets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LinkSet::mutable_targets() {
  return &targets_;
}

// -------------------------------------------------------------------

// PayloadItem

// required string key = 1;
inline bool PayloadItem::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayloadItem::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayloadItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayloadItem::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PayloadItem::key() const {
  return *key_;
}
inline void PayloadItem::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PayloadItem::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PayloadItem::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayloadItem::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PayloadItem::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool PayloadItem::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayloadItem::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayloadItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayloadItem::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PayloadItem::value() const {
  return *value_;
}
inline void PayloadItem::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PayloadItem::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PayloadItem::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayloadItem::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PayloadItem::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string type = 3 [default = "str"];
inline bool PayloadItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayloadItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayloadItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayloadItem::clear_type() {
  if (type_ != &_default_type_) {
    type_->assign(_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& PayloadItem::type() const {
  return *type_;
}
inline void PayloadItem::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PayloadItem::set_type(const char* value) {
  set_has_type();
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PayloadItem::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayloadItem::mutable_type() {
  set_has_type();
  if (type_ == &_default_type_) {
    type_ = new ::std::string(_default_type_);
  }
  return type_;
}
inline ::std::string* PayloadItem::release_type() {
  clear_has_type();
  if (type_ == &_default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&_default_type_);
    return temp;
  }
}

// -------------------------------------------------------------------

// IU

// required string uid = 1;
inline bool IU::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IU::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IU::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IU::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& IU::uid() const {
  return *uid_;
}
inline void IU::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IU::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IU::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IU::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* IU::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 revision = 2;
inline bool IU::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IU::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IU::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IU::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 IU::revision() const {
  return revision_;
}
inline void IU::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// required string category = 3 [default = "undef"];
inline bool IU::has_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IU::set_has_category() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IU::clear_has_category() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IU::clear_category() {
  if (category_ != &_default_category_) {
    category_->assign(_default_category_);
  }
  clear_has_category();
}
inline const ::std::string& IU::category() const {
  return *category_;
}
inline void IU::set_category(const ::std::string& value) {
  set_has_category();
  if (category_ == &_default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(value);
}
inline void IU::set_category(const char* value) {
  set_has_category();
  if (category_ == &_default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(value);
}
inline void IU::set_category(const char* value, size_t size) {
  set_has_category();
  if (category_ == &_default_category_) {
    category_ = new ::std::string;
  }
  category_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IU::mutable_category() {
  set_has_category();
  if (category_ == &_default_category_) {
    category_ = new ::std::string(_default_category_);
  }
  return category_;
}
inline ::std::string* IU::release_category() {
  clear_has_category();
  if (category_ == &_default_category_) {
    return NULL;
  } else {
    ::std::string* temp = category_;
    category_ = const_cast< ::std::string*>(&_default_category_);
    return temp;
  }
}

// required string payload_type = 4 [default = "MAP"];
inline bool IU::has_payload_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IU::set_has_payload_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IU::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IU::clear_payload_type() {
  if (payload_type_ != &_default_payload_type_) {
    payload_type_->assign(_default_payload_type_);
  }
  clear_has_payload_type();
}
inline const ::std::string& IU::payload_type() const {
  return *payload_type_;
}
inline void IU::set_payload_type(const ::std::string& value) {
  set_has_payload_type();
  if (payload_type_ == &_default_payload_type_) {
    payload_type_ = new ::std::string;
  }
  payload_type_->assign(value);
}
inline void IU::set_payload_type(const char* value) {
  set_has_payload_type();
  if (payload_type_ == &_default_payload_type_) {
    payload_type_ = new ::std::string;
  }
  payload_type_->assign(value);
}
inline void IU::set_payload_type(const char* value, size_t size) {
  set_has_payload_type();
  if (payload_type_ == &_default_payload_type_) {
    payload_type_ = new ::std::string;
  }
  payload_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IU::mutable_payload_type() {
  set_has_payload_type();
  if (payload_type_ == &_default_payload_type_) {
    payload_type_ = new ::std::string(_default_payload_type_);
  }
  return payload_type_;
}
inline ::std::string* IU::release_payload_type() {
  clear_has_payload_type();
  if (payload_type_ == &_default_payload_type_) {
    return NULL;
  } else {
    ::std::string* temp = payload_type_;
    payload_type_ = const_cast< ::std::string*>(&_default_payload_type_);
    return temp;
  }
}

// required string owner_name = 5;
inline bool IU::has_owner_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IU::set_has_owner_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IU::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IU::clear_owner_name() {
  if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
    owner_name_->clear();
  }
  clear_has_owner_name();
}
inline const ::std::string& IU::owner_name() const {
  return *owner_name_;
}
inline void IU::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(value);
}
inline void IU::set_owner_name(const char* value) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(value);
}
inline void IU::set_owner_name(const char* value, size_t size) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IU::mutable_owner_name() {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    owner_name_ = new ::std::string;
  }
  return owner_name_;
}
inline ::std::string* IU::release_owner_name() {
  clear_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = owner_name_;
    owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool committed = 6 [default = false];
inline bool IU::has_committed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IU::set_has_committed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IU::clear_has_committed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IU::clear_committed() {
  committed_ = false;
  clear_has_committed();
}
inline bool IU::committed() const {
  return committed_;
}
inline void IU::set_committed(bool value) {
  set_has_committed();
  committed_ = value;
}

// required .ipaaca.protobuf.IU.AccessMode access_mode = 7 [default = PUSH];
inline bool IU::has_access_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IU::set_has_access_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IU::clear_has_access_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IU::clear_access_mode() {
  access_mode_ = 0;
  clear_has_access_mode();
}
inline ::ipaaca::protobuf::IU_AccessMode IU::access_mode() const {
  return static_cast< ::ipaaca::protobuf::IU_AccessMode >(access_mode_);
}
inline void IU::set_access_mode(::ipaaca::protobuf::IU_AccessMode value) {
  GOOGLE_DCHECK(::ipaaca::protobuf::IU_AccessMode_IsValid(value));
  set_has_access_mode();
  access_mode_ = value;
}

// required bool read_only = 8 [default = false];
inline bool IU::has_read_only() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IU::set_has_read_only() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IU::clear_has_read_only() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IU::clear_read_only() {
  read_only_ = false;
  clear_has_read_only();
}
inline bool IU::read_only() const {
  return read_only_;
}
inline void IU::set_read_only(bool value) {
  set_has_read_only();
  read_only_ = value;
}

// repeated .ipaaca.protobuf.PayloadItem payload = 9;
inline int IU::payload_size() const {
  return payload_.size();
}
inline void IU::clear_payload() {
  payload_.Clear();
}
inline const ::ipaaca::protobuf::PayloadItem& IU::payload(int index) const {
  return payload_.Get(index);
}
inline ::ipaaca::protobuf::PayloadItem* IU::mutable_payload(int index) {
  return payload_.Mutable(index);
}
inline ::ipaaca::protobuf::PayloadItem* IU::add_payload() {
  return payload_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem >&
IU::payload() const {
  return payload_;
}
inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem >*
IU::mutable_payload() {
  return &payload_;
}

// repeated .ipaaca.protobuf.LinkSet links = 10;
inline int IU::links_size() const {
  return links_.size();
}
inline void IU::clear_links() {
  links_.Clear();
}
inline const ::ipaaca::protobuf::LinkSet& IU::links(int index) const {
  return links_.Get(index);
}
inline ::ipaaca::protobuf::LinkSet* IU::mutable_links(int index) {
  return links_.Mutable(index);
}
inline ::ipaaca::protobuf::LinkSet* IU::add_links() {
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >&
IU::links() const {
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >*
IU::mutable_links() {
  return &links_;
}

// -------------------------------------------------------------------

// IUPayloadUpdate

// required string uid = 1;
inline bool IUPayloadUpdate::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IUPayloadUpdate::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IUPayloadUpdate::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IUPayloadUpdate::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& IUPayloadUpdate::uid() const {
  return *uid_;
}
inline void IUPayloadUpdate::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IUPayloadUpdate::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IUPayloadUpdate::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IUPayloadUpdate::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* IUPayloadUpdate::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 revision = 2;
inline bool IUPayloadUpdate::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IUPayloadUpdate::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IUPayloadUpdate::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IUPayloadUpdate::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 IUPayloadUpdate::revision() const {
  return revision_;
}
inline void IUPayloadUpdate::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// repeated .ipaaca.protobuf.PayloadItem new_items = 3;
inline int IUPayloadUpdate::new_items_size() const {
  return new_items_.size();
}
inline void IUPayloadUpdate::clear_new_items() {
  new_items_.Clear();
}
inline const ::ipaaca::protobuf::PayloadItem& IUPayloadUpdate::new_items(int index) const {
  return new_items_.Get(index);
}
inline ::ipaaca::protobuf::PayloadItem* IUPayloadUpdate::mutable_new_items(int index) {
  return new_items_.Mutable(index);
}
inline ::ipaaca::protobuf::PayloadItem* IUPayloadUpdate::add_new_items() {
  return new_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem >&
IUPayloadUpdate::new_items() const {
  return new_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::PayloadItem >*
IUPayloadUpdate::mutable_new_items() {
  return &new_items_;
}

// repeated string keys_to_remove = 4;
inline int IUPayloadUpdate::keys_to_remove_size() const {
  return keys_to_remove_.size();
}
inline void IUPayloadUpdate::clear_keys_to_remove() {
  keys_to_remove_.Clear();
}
inline const ::std::string& IUPayloadUpdate::keys_to_remove(int index) const {
  return keys_to_remove_.Get(index);
}
inline ::std::string* IUPayloadUpdate::mutable_keys_to_remove(int index) {
  return keys_to_remove_.Mutable(index);
}
inline void IUPayloadUpdate::set_keys_to_remove(int index, const ::std::string& value) {
  keys_to_remove_.Mutable(index)->assign(value);
}
inline void IUPayloadUpdate::set_keys_to_remove(int index, const char* value) {
  keys_to_remove_.Mutable(index)->assign(value);
}
inline void IUPayloadUpdate::set_keys_to_remove(int index, const char* value, size_t size) {
  keys_to_remove_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IUPayloadUpdate::add_keys_to_remove() {
  return keys_to_remove_.Add();
}
inline void IUPayloadUpdate::add_keys_to_remove(const ::std::string& value) {
  keys_to_remove_.Add()->assign(value);
}
inline void IUPayloadUpdate::add_keys_to_remove(const char* value) {
  keys_to_remove_.Add()->assign(value);
}
inline void IUPayloadUpdate::add_keys_to_remove(const char* value, size_t size) {
  keys_to_remove_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IUPayloadUpdate::keys_to_remove() const {
  return keys_to_remove_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IUPayloadUpdate::mutable_keys_to_remove() {
  return &keys_to_remove_;
}

// required bool is_delta = 5 [default = false];
inline bool IUPayloadUpdate::has_is_delta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IUPayloadUpdate::set_has_is_delta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IUPayloadUpdate::clear_has_is_delta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IUPayloadUpdate::clear_is_delta() {
  is_delta_ = false;
  clear_has_is_delta();
}
inline bool IUPayloadUpdate::is_delta() const {
  return is_delta_;
}
inline void IUPayloadUpdate::set_is_delta(bool value) {
  set_has_is_delta();
  is_delta_ = value;
}

// required string writer_name = 6;
inline bool IUPayloadUpdate::has_writer_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IUPayloadUpdate::set_has_writer_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IUPayloadUpdate::clear_has_writer_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IUPayloadUpdate::clear_writer_name() {
  if (writer_name_ != &::google::protobuf::internal::kEmptyString) {
    writer_name_->clear();
  }
  clear_has_writer_name();
}
inline const ::std::string& IUPayloadUpdate::writer_name() const {
  return *writer_name_;
}
inline void IUPayloadUpdate::set_writer_name(const ::std::string& value) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(value);
}
inline void IUPayloadUpdate::set_writer_name(const char* value) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(value);
}
inline void IUPayloadUpdate::set_writer_name(const char* value, size_t size) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IUPayloadUpdate::mutable_writer_name() {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  return writer_name_;
}
inline ::std::string* IUPayloadUpdate::release_writer_name() {
  clear_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = writer_name_;
    writer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IURetraction

// required string uid = 1;
inline bool IURetraction::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IURetraction::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IURetraction::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IURetraction::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& IURetraction::uid() const {
  return *uid_;
}
inline void IURetraction::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IURetraction::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IURetraction::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IURetraction::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* IURetraction::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 revision = 2;
inline bool IURetraction::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IURetraction::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IURetraction::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IURetraction::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 IURetraction::revision() const {
  return revision_;
}
inline void IURetraction::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// -------------------------------------------------------------------

// IUCommission

// required string uid = 1;
inline bool IUCommission::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IUCommission::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IUCommission::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IUCommission::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& IUCommission::uid() const {
  return *uid_;
}
inline void IUCommission::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IUCommission::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IUCommission::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IUCommission::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* IUCommission::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 revision = 2;
inline bool IUCommission::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IUCommission::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IUCommission::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IUCommission::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 IUCommission::revision() const {
  return revision_;
}
inline void IUCommission::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// required string writer_name = 3;
inline bool IUCommission::has_writer_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IUCommission::set_has_writer_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IUCommission::clear_has_writer_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IUCommission::clear_writer_name() {
  if (writer_name_ != &::google::protobuf::internal::kEmptyString) {
    writer_name_->clear();
  }
  clear_has_writer_name();
}
inline const ::std::string& IUCommission::writer_name() const {
  return *writer_name_;
}
inline void IUCommission::set_writer_name(const ::std::string& value) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(value);
}
inline void IUCommission::set_writer_name(const char* value) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(value);
}
inline void IUCommission::set_writer_name(const char* value, size_t size) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IUCommission::mutable_writer_name() {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  return writer_name_;
}
inline ::std::string* IUCommission::release_writer_name() {
  clear_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = writer_name_;
    writer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IULinkUpdate

// required string uid = 1;
inline bool IULinkUpdate::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IULinkUpdate::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IULinkUpdate::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IULinkUpdate::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& IULinkUpdate::uid() const {
  return *uid_;
}
inline void IULinkUpdate::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IULinkUpdate::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void IULinkUpdate::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IULinkUpdate::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* IULinkUpdate::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 revision = 2;
inline bool IULinkUpdate::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IULinkUpdate::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IULinkUpdate::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IULinkUpdate::clear_revision() {
  revision_ = 0u;
  clear_has_revision();
}
inline ::google::protobuf::uint32 IULinkUpdate::revision() const {
  return revision_;
}
inline void IULinkUpdate::set_revision(::google::protobuf::uint32 value) {
  set_has_revision();
  revision_ = value;
}

// repeated .ipaaca.protobuf.LinkSet new_links = 3;
inline int IULinkUpdate::new_links_size() const {
  return new_links_.size();
}
inline void IULinkUpdate::clear_new_links() {
  new_links_.Clear();
}
inline const ::ipaaca::protobuf::LinkSet& IULinkUpdate::new_links(int index) const {
  return new_links_.Get(index);
}
inline ::ipaaca::protobuf::LinkSet* IULinkUpdate::mutable_new_links(int index) {
  return new_links_.Mutable(index);
}
inline ::ipaaca::protobuf::LinkSet* IULinkUpdate::add_new_links() {
  return new_links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >&
IULinkUpdate::new_links() const {
  return new_links_;
}
inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >*
IULinkUpdate::mutable_new_links() {
  return &new_links_;
}

// repeated .ipaaca.protobuf.LinkSet links_to_remove = 4;
inline int IULinkUpdate::links_to_remove_size() const {
  return links_to_remove_.size();
}
inline void IULinkUpdate::clear_links_to_remove() {
  links_to_remove_.Clear();
}
inline const ::ipaaca::protobuf::LinkSet& IULinkUpdate::links_to_remove(int index) const {
  return links_to_remove_.Get(index);
}
inline ::ipaaca::protobuf::LinkSet* IULinkUpdate::mutable_links_to_remove(int index) {
  return links_to_remove_.Mutable(index);
}
inline ::ipaaca::protobuf::LinkSet* IULinkUpdate::add_links_to_remove() {
  return links_to_remove_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >&
IULinkUpdate::links_to_remove() const {
  return links_to_remove_;
}
inline ::google::protobuf::RepeatedPtrField< ::ipaaca::protobuf::LinkSet >*
IULinkUpdate::mutable_links_to_remove() {
  return &links_to_remove_;
}

// required bool is_delta = 5 [default = false];
inline bool IULinkUpdate::has_is_delta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IULinkUpdate::set_has_is_delta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IULinkUpdate::clear_has_is_delta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IULinkUpdate::clear_is_delta() {
  is_delta_ = false;
  clear_has_is_delta();
}
inline bool IULinkUpdate::is_delta() const {
  return is_delta_;
}
inline void IULinkUpdate::set_is_delta(bool value) {
  set_has_is_delta();
  is_delta_ = value;
}

// required string writer_name = 6;
inline bool IULinkUpdate::has_writer_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IULinkUpdate::set_has_writer_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IULinkUpdate::clear_has_writer_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IULinkUpdate::clear_writer_name() {
  if (writer_name_ != &::google::protobuf::internal::kEmptyString) {
    writer_name_->clear();
  }
  clear_has_writer_name();
}
inline const ::std::string& IULinkUpdate::writer_name() const {
  return *writer_name_;
}
inline void IULinkUpdate::set_writer_name(const ::std::string& value) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(value);
}
inline void IULinkUpdate::set_writer_name(const char* value) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(value);
}
inline void IULinkUpdate::set_writer_name(const char* value, size_t size) {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  writer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IULinkUpdate::mutable_writer_name() {
  set_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    writer_name_ = new ::std::string;
  }
  return writer_name_;
}
inline ::std::string* IULinkUpdate::release_writer_name() {
  clear_has_writer_name();
  if (writer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = writer_name_;
    writer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace ipaaca

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ipaaca::protobuf::IU_AccessMode>() {
  return ::ipaaca::protobuf::IU_AccessMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2fipaaca_2eproto__INCLUDED
